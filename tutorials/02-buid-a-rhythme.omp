; OM File Header - Saved 2012/11/22 19:13:59
; (6.060015 :patc (om-make-point 250 24) (om-make-point 839 151) (om-make-point 816 694) "No documentation " 183 0 nil "2012/11/22 19:13:59")
; End File Header
; External resources 
; (list (list (quote :picture) "../../resources/pict/diphone-logo"))
(in-package :om)(load-lib-for (quote ("OM-Diph")))(setf *om-current-persistent* (om-load-patch1 "02-buid-a-rhythme" (quote ((om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 219 500) (om-make-point 123 30) "MyDiphScrpit.txt" "\"MyDiphScrpit.txt\"" nil) (om-load-boxcall (quote genfun) "WRITEDIPHSCRIPT2" (quote diph::writediphscript2) (quote ((om-load-inputfun (quote input-funbox) "list of script lines" "DONNEES" (list 1 2 3)) (om-load-inputfun (quote input-funbox) "PATH:filename" "MYFILENAME" "MyDiphScrpit.txt"))) (om-make-point 175 545) nil nil nil nil 1) (om-load-boxcall (quote genfun) "EXECUTEDIPHSCRIPT" (quote diph::executediphscript) (quote ((om-load-inputfun (quote input-funbox) "Name of the script to execute." "SCRIPT-NAME" "MyDiphScrpit.txt"))) (om-make-point 39 539) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DIPHBUILDRYTHME1" (quote diph::diphbuildrythme) (quote ((om-load-inputfun (quote input-funbox) "list of length values OR ChordSeq Or Voice" "DURLIST" (list 0.5 1.0 2.0 1.0 1.0)) (om-load-inputfun (quote input-funbox) "list of scale values (0 means no change)" "INTENSITYLIST" (list 0)) (om-load-inputfun (quote input-funbox) "MySeq" "SEQNAME" "MySeq") (om-load-inputfun (quote input-funbox) "number of segments in the sequences OR list of segment index : (1 12 3 2 9 ...)" "SEQLENGTH" 10) (om-load-inputfunmenu1 (quote input-funmenu) "Loop list of values OR not." "LOOPMODE" "loop" (list (list "No Loop" "noloop") (list "Loop" "loop"))) (om-load-inputfun (quote input-funbox) "Interpolation duration" "INTERDURLIST" (list 0.1 0.05 0.025)) (om-load-inputfunmenu1 (quote input-funmenu) "Coor mode" "BPFCOORMODE" "Elastic" (list (list "Elastic" "Elastic") (list "Hard" "Hard") (list "ElacticReverse" "ElacticReverse") (list "HardReverse" "HardReverse"))) (om-load-inputfunmenu1 (quote input-funmenu) "Method used" "METHOD" 3 (list (list "Use sides" 1) (list "Use centers" 2) (list "Use centers & sides" 3))))) (om-make-point 29 416) (om-make-point 183 61) nil nil nil 1) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 12 106) (om-make-point 265 25) (list 1/8 1/8 1/4 1/8 1/4 1/8 1/4 1/8 1/8 1/4 1/4) "(1/8 1/8 1/4 1/8 1/4 1/8 1/4 1/8 1/8 1/4 1/4)" nil) (om-load-boxcall (quote genfun) "MKTREE" (quote mktree) (quote ((om-load-inputfun (quote input-funbox) "list of integer ratio" "RHYTHM" (list 1/4 1/4 1/4 1/4)) (om-load-inputfun (quote input-funbox) "list of time signatures" "TIMESIGNS" (list 4 4)))) (om-make-point 85 141) nil nil nil nil 1) (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object , a list of chord objects, a list of midics, a list of lists of midics." "CHORDS" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "a number indicating the frequency of the quarter-note (default 60/mn)" "TEMPO" 120) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 100) (om-load-inputfun (quote input-funbox) "no documentation" "TIES" nil))) (om-make-point 15 196) (om-make-point 250 97) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1)) 1 (1 (1 1)) (1 (1.0 1)))) ((4 4) (1 (1 (1 1)) 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 120) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (microplay approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems scale player)) (list nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 (quote t) nil (quote :midishare))) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 154 150) (om-make-point 32 32) 120 "120" nil) (om-load-boxcomment "comment" (om-make-point 352 32) (quote "7. Précisez la méthode à utiliser pour le rythme. Utilisation des cotés ou du centre des segments, ou les deux pour caller le rythme.") "" (om-make-point 240 424) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 201 375) (om-make-point 127 30) (list 0.025 0.05 0.075) "(0.025 0.05 0.075)" nil) (om-load-boxcomment "comment" (om-make-point 238 24) (quote "8. Donnez un nom au script créé par OM. ") "" (om-make-point 358 498) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 326 44) (quote "5. Précisez le mode d'interprétation des données des segments en utilisant le menu de la dernière entrée de l'objet. Le mode \"hard\" est indiqué pour des durées de segment très petites.") "" (om-make-point 343 344) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 352 24) (quote "6. Donnez la liste des durées d'interpolation entre les segments. ") "" (om-make-point 411 397) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 412 59) (quote "4. Donnez le nombre de segments dans la séquence cible. Ce paramètre permet à l'objet de boucler un rythme sur l'ensemble des segments si la liste de durée est plus petite que le nombre de segments dans la séquence. Choisissez si vous voulez boucler grave au menu de la cinquième entrée.") "" (om-make-point 324 284) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 319 38) (quote "3. Donnez le nom de la séquence à laquelle s'adresse le rythme. Il doit ótre identique au nom donné à l'étape 2.") "" (om-make-point 290 242) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 380 37) (quote "2. Si un voice est branché à la première entrée de l'objet, la deuxième entrée est inactive. Les intensités sont prélévées dans le voice.") "" (om-make-point 275 170) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 396 34) (quote "1. Donnez une liste de durée à la première entrée de l'objet. Cette liste pourrait ótre issu d'un voice dans un patch plus complexe.") "" (om-make-point 234 125) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 412 37) (quote "L'objet diphbuildrythme sert à générer un script qui va appliquer un rythme à la séquence fabriqué à l'étape 1.") "" (om-make-point 321 52) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 228 33) (quote "Etape 2 : fabriquer un ou plusieurs rythmes en utilisant un objet voice.") "" (om-make-point 322 14) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 118 381) (om-make-point 34 30) 50 "50" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 132 332) (om-make-point 91 30) "SAHIB.seq" "\"SAHIB.seq\"" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 66 301) (om-make-point 111 30) (list -0.75 0 0.25 1) "(-0.75 0 0.25 1)" nil))) (quote ((3 0 1 0 nil 0) (0 0 1 1 nil 0) (3 0 2 0 nil 0) (6 0 3 0 nil 0) (21 0 3 1 nil 0) (20 0 3 2 nil 0) (19 0 3 3 nil 0) (9 0 3 5 nil 0) (4 0 5 0 nil 0) (5 0 6 1 nil 0) (7 0 6 3 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "diphone-logo" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "diphone-logo" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 40 10)) (setf (pict-size newpict) (om-make-point 167 91)) newpict)) 6.060015))