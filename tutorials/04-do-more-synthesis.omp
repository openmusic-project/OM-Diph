; OM File Header - Saved 2012/11/22 19:17:11
; (6.060015 :patc (om-make-point 183 91) (om-make-point 255 34) (om-make-point 801 684) "No documentation " 183 0 nil "2012/11/22 19:17:11")
; End File Header
; External resources 
; (list (list (quote :picture) "../../resources/pict/diphone-logo") (list (quote :text) "../../diphfolder/OM_Diph/SAHIB.dico.desc"))
(in-package :om)(load-lib-for (quote ("OM-Diph")))(setf *om-current-persistent* (om-load-patch1 "04-do-more-synthesis" (quote ((om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 24 40) (om-make-point 94 30) "SAHIB.dico" "\"SAHIB.dico\"" nil) (om-load-boxcall (quote genfun) "GETDESCRIPTION" (quote diph::getdescription) (quote ((om-load-inputfun (quote input-funbox) "Name of a dictionary" "DICO" "SAHIB.dico"))) (om-make-point 2 82) nil nil nil nil 1) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "text to put in the file" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede mode" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "contents eval mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list"))))) (om-make-point 99 90) (om-make-point 70 50) (load-textfile (om-make-pathname :directory (quote (:relative "diphfolder" "OM_Diph")) :device nil :host nil :name "SAHIB.dico" :type "desc") (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) nil nil nil nil) (om-load-boxcomment "comment31" (om-make-point 152 45) (quote "<--- exécutez l'objet séquence") "" (om-make-point 588 708) nil (om-make-color 0 0 0) (om-make-font :wild 12 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 142 38) (quote "<--- exécutez l'objet séquence") "" (om-make-point 417 607) nil (om-make-color 0 0 0) (om-make-font :wild 12 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment31" (om-make-point 152 45) (quote "<--- exécutez l'objet séquence") "" (om-make-point 588 708) nil (om-make-color 0 0 0) (om-make-font :wild 12 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment2" (om-make-point 152 45) (quote "<--- exécutez l'objet séquence") "" (om-make-point 568 688) nil (om-make-color 0 0 0) (om-make-font :wild 12 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 152 45) (quote "<--- exécutez l'objet séquence") "" (om-make-point 568 688) nil (om-make-color 0 0 0) (om-make-font :wild 12 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 308 203) (om-make-point 138 30) "use-diphone-folder" "\"use-diphone-folder\"" nil) (om-load-boxcomment "comment" (om-make-point 165 52) (quote "5) cet objet exécute le script Diphone.") "" (om-make-point 97 551) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil) (om-load-inputfun (quote input-funbox) "patch" "OPPATCH" nil))) (om-make-point 354 593) nil nil nil 2) (om-load-boxcall (quote genfun) "DOSYNTHESIS" (quote diph::dosynthesis) (quote ((om-load-inputfun (quote input-funbox) "Name of the Apple script to execute." "SCRIPT-NAME" "MyAppleScrpit.txt"))) (om-make-point 438 478) nil nil nil nil 1) (om-load-boxcall (quote genfun) "EXECUTEDIPHSCRIPT" (quote diph::executediphscript) (quote ((om-load-inputfun (quote input-funbox) "Name of the script to execute." "SCRIPT-NAME" "MyDiphScrpit.txt"))) (om-make-point 267 526) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 262 73) (quote "7) Cet objet exécute automatiquement l'applescript. Les synthèses de haute qualités sont générées par Diphone et sauvegardé dans le dossier OM_Diph de votre dossier Diphone.") "" (om-make-point 506 495) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 218 78) (quote "6) Cet autre objet écrit sur le disque un fichier Applescript capable de lancer Diphone et la synthèse des séquences nouvellement crées.") "" (om-make-point 505 360) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 169 80) (quote "4) cet objet écrit le script diphone sur le disque. Vous pouvez ainsi concerver le script avec un nom différent de celui des scripts temporaires.") "" (om-make-point 45 457) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 209 53) (quote "3) l'objet DiphSaveAs ajoute les lignes de script nécessaire à la sauvegarde des séquences sur le disque dur.") "" (om-make-point 321 239) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 157 50) (quote "Les séquences sont crées à l'intérieur de ce patch. Vous pouvez l'ouvrir et le modifier.") "" (om-make-point 82 178) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 256 22) (quote "2) Donnez le nom des séquences à synthétiser.") "" (om-make-point 177 121) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 340 75) (quote "Ce patch montre comment utiliser OM_Diph pour créer et synthétiser une série de séquences.$Nous allons utiliser la fonction Mapcar qui permet d'appliquer un patch à une liste d'éléments.") "" (om-make-point 329 14) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 147 155) (om-make-point 230 30) (list "sahib1" "sahib2" "sahib3" "sahib4") "(\"sahib1\" \"sahib2\" \"sahib3\" \"sahib4\")" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "one list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 73 364) (om-make-point 63 53) nil nil nil 1) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 260 413) (om-make-point 123 30) "MyDiphScrpit.txt" "\"MyDiphScrpit.txt\"" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 467 307) (om-make-point 128 30) "MyApplescript.txt" "\"MyApplescript.txt\"" nil) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil))) (om-make-point 169 380) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DIPHSAVEAS" (quote diph::diphsaveas) (quote ((om-load-inputfun (quote input-funbox) "Name of a dictionary/sequence OR list of dictionaries/sequences" "LISTITEM" "MySeq") (om-load-inputfun (quote input-funbox) "Path : if nil, it use the default diphone folder" "PATH" "use-default-folder"))) (om-make-point 263 237) nil nil nil "diphsaveas" 2) (om-load-boxcall (quote genfun) "WRITEAPPLESCRIPT2" (quote diph::writeapplescript2) (quote ((om-load-inputfun (quote input-funbox) "list" "LISTSEQ" (list 1 2 3)) (om-load-inputfun (quote input-funbox) "" "MYFILENAME" "MyApplescript.txt"))) (om-make-point 411 342) nil nil nil "writeapplescript2" 1) (om-load-boxcall (quote genfun) "WRITEDIPHSCRIPT2" (quote diph::writediphscript2) (quote ((om-load-inputfun (quote input-funbox) "list of script lines" "DONNEES" (list 1 2 3)) (om-load-inputfun (quote input-funbox) "PATH:filename" "MYFILENAME" "MyDiphScrpit.txt"))) (om-make-point 215 453) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxin "input1" 1 (om-make-point 146 52) "no documentation" "dico_desc" nil nil) (om-load-boxcall (quote genfun) "DIPHSEQ&RYTHME1" (quote diph::diphseq&rythme) (quote ((om-load-inputfun (quote input-funbox) "List of segments : (MyDico(inst1(Segm1Segm8 Segm3) Inst2 (Segm1 Segm5 segm1)))" "LISTSEG" (list "MyDico" (list "inst1" (list "Segm1" "Segm8" "Segm3") "Inst2" (list "Segm1" "Segm5" "Segm1")))) (om-load-inputfun (quote input-funbox) "list of length values OR ChordSeq OR Voice" "NEWVALUELIST" (list 0.5 1.0 2.0 1.0 1.0)) (om-load-inputfun (quote input-funbox) "list of scale values (0 means no change)" "INTENSITYLIST" (list -0.75 0 0.25)) (om-load-inputfun (quote input-funbox) "MySeq" "SEQNAME" "MySeq") (om-load-inputfunmenu1 (quote input-funmenu) "Loop list of values OR not." "LOOPMODE" "loop" (list (list "No Loop" "noloop") (list "Loop" "loop"))) (om-load-inputfun (quote input-funbox) "Interpolation duration" "INTERDURLIST" (list 0.1)) (om-load-inputfunmenu1 (quote input-funmenu) "Coor mode" "BPFCOORMODE" "Elastic" (list (list "Elastic" "Elastic") (list "Hard" "Hard") (list "ElacticReverse" "ElacticReverse") (list "HardReverse" "HardReverse"))) (om-load-inputfunmenu1 (quote input-funmenu) "Method for rythme" "METHOD" 3 (list (list "Use sides" 1) (list "Use centers" 2) (list "Use centers & sides" 3))))) (om-make-point 241 500) (om-make-point 217 61) nil nil nil 1) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 308 306) (om-make-point 43 22) 10 "10" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 534 465) (om-make-point 52 20) (list 0.1) "(0.1)" nil) (om-load-boxcall (quote bastype) "list211" (quote list) (quote nil) (om-make-point 674 37) (om-make-point 146 20) (list 1 1 1 1 1 2) "(1 1 1 1 1 2 )" nil) (om-load-boxcall (quote genfun) "NTH-RANDOM11" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "the list" "LIST" nil))) (om-make-point 703 62) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DIPHSEQUENCELENGTH" (quote diph::diphsequencelength) (quote ((om-load-inputfun (quote input-funbox) "List of segments" "LISTSEG" (list "MyDico" (list "inst1" (list "Segm1" "Segm8" "Segm3")))))) (om-make-point 461 39) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 600 256) (om-make-point 31 35) nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N1" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 50))) (om-make-point 649 267) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 665 189) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 48) (om-load-inputfun (quote input-funbox) "max" "HIGH" 72))) (om-make-point 595 195) nil nil nil nil 1) (om-load-editor-box1 "VOICE1" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 -2 1 1)) 1 1)) (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) -1 1))))) (om-load-inputfun (quote input-funbox) "a chord object , a list of chord objects, a list of midics, a list of lists of midics." "CHORDS" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "a number indicating the frequency of the quarter-note (default 60/mn)" "TEMPO" 60) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 100) (om-load-inputfun (quote input-funbox) "no documentation" "TIES" nil))) (om-make-point 485 338) (om-make-point 259 105) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (15/2 (((6 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((6 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((6 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((6 4) ((1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((6 4) ((1 (1 1)) -4 -1.0))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 120) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos show-stems scale microplay)) (list (quote :midishare) 0 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 (quote t) nil nil)) t nil nil nil) (om-load-boxcall (quote genfun) "MKTREE" (quote mktree) (quote ((om-load-inputfun (quote input-funbox) "list of integer ratio" "RHYTHM" (list 1/4 1/4 1/4 1/4)) (om-load-inputfun (quote input-funbox) "list of time signatures" "TIMESIGNS" (list 4 4)))) (om-make-point 520 248) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM/1" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 8))) (om-make-point 479 190) (om-make-point 74 35) nil nil nil 1) (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 566 197) (om-make-point 35 20) (list 6 4) "(6 4)" nil) (om-load-boxcall (quote genfun) "REPEAT-N12" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 100))) (om-make-point 570 124) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 713 314) (om-make-point 50 20) 150 "150" nil) (om-load-boxcall (quote genfun) "DIPHPACK1" (quote diph::diphpack) (quote ((om-load-inputfun (quote input-funbox) "Dictionary name" "DICONAME" "MyDico") (om-load-inputfun (quote input-funbox) "Instrument name" "INSTNAME" "Inst") (om-load-inputfun (quote input-funbox) "segments list" "SEGLIST" (list "Segm1" "Segm2" "Segm4")))) (om-make-point 115 400) (om-make-point 153 61) nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 173 294) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST11" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 202 225) nil nil nil nil 1) (om-load-boxcall (quote genfun) "NTH-RANDOM1" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "the list" "LIST" nil))) (om-make-point 239 253) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N1111" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 3))) (om-make-point 219 328) nil nil nil "repeat-n" 1) (om-load-boxcall (quote genfun) "DIPHEXTRACT1" (quote diph::diphextract) (quote ((om-load-inputfun (quote input-funbox) "Description file read by a Textfile object. DON'T FORGET TO ERASE THE FIRST LINE OF THE TEXT FILE MANUNALY !!!" "DESCRFILE" "Descriptionfile"))) (om-make-point 96 144) (om-make-point 202 61) nil "&" nil 9) (om-load-boxout "output" 0 (om-make-point 465 565) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 402 301) "no documentation" "seqname" nil nil))) (quote ((17 0 1 0 nil 0) (11 0 1 1 nil 0) (24 0 1 3 nil 0) (3 0 1 5 nil 0) (4 0 5 0 nil 0) (17 0 6 0 nil 0) (10 0 7 0 nil 0) (7 0 8 0 nil 0) (9 0 8 1 nil 0) (15 0 9 0 nil 0) (12 0 11 1 nil 0) (8 0 11 2 nil 0) (16 0 11 3 nil 0) (13 0 12 0 nil 0) (14 0 12 1 nil 0) (15 0 13 0 nil 0) (5 0 15 0 nil 0) (6 0 15 1 nil 0) (22 0 17 0 nil 0) (18 0 17 1 nil 0) (21 0 17 2 nil 0) (22 1 18 0 nil 0) (22 2 19 0 nil 0) (19 0 20 0 nil 0) (20 0 21 0 nil 0) (2 0 21 1 nil 0) (0 0 22 0 nil 0) (1 0 23 0 nil 0))) 6.060015 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "seqname" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 14 177) nil nil "l" nil) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 67 302) (om-make-point 117 37) nil nil "mapcar" 1))) (quote ((0 0 1 0 nil 0) (1 0 2 0 nil 0) (12 0 10 0 nil 0) (11 0 10 1 nil 0) (26 0 11 0 nil 0) (27 0 12 0 nil 0) (29 0 21 0 nil 0) (21 0 24 0 nil 0) (25 0 24 1 nil 0) (20 0 25 0 nil 0) (8 0 25 1 nil 0) (25 1 26 0 nil 0) (23 0 26 1 nil 0) (24 0 27 0 nil 0) (22 0 27 1 nil 0) (2 1 28 1 nil 0) (28 0 29 0 nil 0) (20 0 29 1 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "diphone-logo" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture (quote |USER-diphone-logo|)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 573 83)) (setf (pict-size newpict) (om-make-point 141 106)) newpict)) 6.060015))