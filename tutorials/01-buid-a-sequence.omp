; OM File Header - Saved 2012/11/22 18:50:13
; (6.060015 :patc (om-make-point 106 25) (om-make-point 601 120) (om-make-point 861 790) "No documentation " 183 0 nil "2012/11/22 18:50:13")
; End File Header
; External resources 
; (list (list (quote :picture) "../../resources/pict/diphone-logo") (list (quote :text) "../../diphfolder/OM_Diph/SAHIB.dico.desc"))
(in-package :om)(load-lib-for (quote ("OM-Diph")))(setf *om-current-persistent* (om-load-patch1 "01-buid-a-sequence" (quote ((om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "text to put in the file" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede mode" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "contents eval mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list"))))) (om-make-point 70 194) (om-make-point 96 57) (load-textfile (om-make-pathname :directory (quote (:relative "diphfolder" "OM_Diph")) :device nil :host nil :name "SAHIB.dico" :type "desc") (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) nil nil nil nil) (om-load-boxcomment "comment" (om-make-point 346 60) (quote "La librairie crée automatiquement un dossier \"OM_Diph\" dans votre dossier Diphone. C'est dans ce dossier que tous les éléments créés par la librairie seront sauvegardés.") "" (om-make-point 481 92) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 261 53) (quote "Définir votre dossier projet Diphone actuel dans les préférences OM (onglet 'Libraries').") "" (om-make-point 482 29) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 208 86) (om-make-point 108 32) "SAHIB.dico" "\"SAHIB.dico\"" nil) (om-load-boxcall (quote genfun) "EXECUTEDIPHSCRIPT" (quote diph::executediphscript) (quote ((om-load-inputfun (quote input-funbox) "Name of the script to execute." "SCRIPT-NAME" "MyDiphScrpit.txt"))) (om-make-point 91 613) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GETDESCRIPTION" (quote diph::getdescription) (quote ((om-load-inputfun (quote input-funbox) "Name of a dictionary" "DICO" (list "MyDico")))) (om-make-point 172 118) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DIPHEXTRACT" (quote diph::diphextract) (quote ((om-load-inputfun (quote input-funbox) "Description file read by a Textfile object. DON'T FORGET TO ERASE THE FIRST LINE OF THE TEXT FILE MANUNALY !!!" "DESCRFILE" "Descriptionfile"))) (om-make-point 28 269) (om-make-point 179 61) nil "&" nil 9) (om-load-boxcall (quote genfun) "DIPHBUILDSEQUENCE" (quote diph::diphbuildsequence) (quote ((om-load-inputfun (quote input-funbox) "List of segments : (MyDico(inst1(Segm1Segm8 Segm3) Inst2 (Segm1 Segm5 segm1)))" "LISTSEG" (list "MyDico" (list "inst1" (list "Segm1" "Segm8" "Segm3") "Inst2" (list "Segm1" "Segm5" "Segm1")))) (om-load-inputfun (quote input-funbox) "Name of the new sequence" "SEQNAME" "my-seq-name.seq"))) (om-make-point 91 540) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 373 45) (quote "7. Executez l'objet \"executescript\" pour écrire le script sur le disque dur et l'exécuter automatiquement à l'aide d'une commande applescript dans le terminal...") "" (om-make-point 311 603) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "FIRST1" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 102 334) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 47 377) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 240 383) (om-make-point 34 30) 50 "50" nil) (om-load-boxcomment "comment" (om-make-point 382 53) (quote "6. L'objet \"diphbuidsequence\" génère un script complet pour construire une séquence. Donnez à la première entrée la liste des segments à copier dans la séquence, ensuite le nom de la séquence à créer dans Diphone.") "" (om-make-point 374 523) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 384 61) (quote "5. L'objet \"diphpack\" reconstruit une liste des segments à copier dans la séquence, conforme à l'attente de l'objet \"diphbuidsequence\". Le résultat est une liste semblable au type <list> du scripting de Diphone (reportez-vous à la documentation de Diphone pour plus d'informations).") "" (om-make-point 341 442) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 359 71) (quote "4. Nous allons construire une séquence en tirant au hasard 50 segments dans la liste des segments fournie par \"diphextract\". Il s'agit ici d'un processus simple, libre à vous de placer à cet endroit un processus plus complexe... ") "" (om-make-point 391 369) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 366 72) (quote "3. L'objet \"diphextract\" sert à extraire du fichier description les informations dons nous avons besoin : le nom du dictionnaire , le nom de l'instrument, enfin la liste des segments. Evaluez chaque sortie de l'objet \"diphextract\" et vérifiez le résultat dans la console.") "" (om-make-point 228 247) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 173 500) (om-make-point 91 30) "SAHIB.seq" "\"SAHIB.seq\"" nil) (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "the list" "LIST" nil))) (om-make-point 108 387) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 50))) (om-make-point 217 417) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DIPHPACK" (quote diph::diphpack) (quote ((om-load-inputfun (quote input-funbox) "Dictionary name" "DICONAME" "MyDico") (om-load-inputfun (quote input-funbox) "Instrument name" "INSTNAME" "Inst") (om-load-inputfun (quote input-funbox) "segments list" "SEGLIST" (list "Segm1" "Segm2" "Segm4")))) (om-make-point 6 462) (om-make-point 153 61) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 346 60) (quote "2. Donnez le nom du dictionnaire que vous voulez utiliser pour générer la séquence. L'objet \"getdescription\" permet de récupérer une description de notre dictionnaire sous la forme d'une liste, dans un objet \"Textfile\" d'OM.") "" (om-make-point 338 173) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 223 35) (quote "Etape 1 : exécuter un  scipt pour construire une séquence") "" (om-make-point 174 44) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))))) (quote ((5 0 0 0 nil 0) (7 0 4 0 nil 0) (3 0 5 0 nil 0) (0 1 6 0 nil 0) (19 0 7 0 nil 0) (16 0 7 1 nil 0) (6 2 9 0 nil 0) (6 1 10 0 nil 0) (9 0 17 0 nil 0) (17 0 18 0 nil 0) (11 0 18 1 nil 0) (6 0 19 0 nil 0) (10 0 19 1 nil 0) (18 0 19 2 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "diphone-logo" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "diphone-logo" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 4 36)) (setf (pict-size newpict) (om-make-point 167 89)) newpict)) 6.060015))