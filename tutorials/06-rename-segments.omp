; OM File Header - Saved 2012/11/22 19:19:41
; (6.060015 :patc (om-make-point 11 172) (om-make-point 173 24) (om-make-point 775 678) "non documentation" 183 0 nil "2012/11/22 19:19:41")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Diph")))(setf *om-current-persistent* (om-load-patch1 "06-rename-segments" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 236 241) (om-make-point 45 30) (quote flute) "flute" nil) (om-load-boxcomment "comment3" (om-make-point 275 44) (quote "4. Choisissez l'approximation et le format final des noms de segments.") "" (om-make-point 255 281) nil (om-make-color 0 0 0) (om-make-font :wild 12 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "DIPHRENAMESEG" (quote diph::diphrenameseg) (quote ((om-load-inputfun (quote input-funbox) "Self of diph-script class" "OBJET" nil) (om-load-inputfun (quote input-funbox) "F0 if different from the one located in your Diphone project folder." "F0FILE" nil) (om-load-inputfun (quote input-funbox) "approx 2->1/2 ton 4->1/4 ton" "APPROX-CONF" 2) (om-load-inputfun (quote input-funbox) "String to add to the name - if not defined intrument name will be use" "GENERIC-NAME" nil) (om-load-inputfunmenu1 (quote input-funmenu) "final string form" "FINAL-STRING" 2 (list (list "original_name+string" 1) (list "pitch+string" 2) (list "pith+original_name+string" 3))))) (om-make-point 167 295) nil nil nil nil 4) (om-load-boxcall (quote genfun) "DIPHCREATEDICTIONARY" (quote diph::diphcreatedictionary) (quote ((om-load-inputfun (quote input-funbox) "Self of diph-script class" "OBJET" nil))) (om-make-point 225 494) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 283 52) (quote "L'objet \"diphrenameseg\" effectue une moyenne de f0 dans les zones d'interpolations et renomme les segments en concéquence.") "" (om-make-point 255 325) nil (om-make-color 0 0 0) (om-make-font :wild 12 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment2" (om-make-point 293 96) (quote "5. Vous pouvez maintenant soit executer la classe et sauvegarder votre script avec ctrl puis \"export\" et finir votre dictionnaire dans AddAn. Ou bien, lancez directement la création du dictionnaire en exécutant l'objet \"diphcreatedictionary\".") "" (om-make-point 334 487) nil (om-make-color 0 0 0) (om-make-font :wild 12 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment3" (om-make-point 282 65) (quote "2. Faites une analyse AdAnn du son jusqu'a l'étape Script incluse. Veillez à bien réaliser l'analyse de la fréquence fondamentale. Le patch en a besoin pour renommer les segments.") "" (om-make-point 406 93) nil (om-make-color 0 0 0) (om-make-font :wild 12 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment2" (om-make-point 185 50) (quote "3. Charger le script avec la touche ctrl sur la classe puis  \"import\".") "" (om-make-point 201 150) nil (om-make-color 0 0 0) (om-make-font :wild 12 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 175 50) (quote "1. Si ça n''est pas fait, définissez où se trouve votre dossier projet Diphone actuel. ") "" (om-make-point 385 23) nil (om-make-color 0 0 0) (om-make-font :wild 12 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 283 52) (quote "Ce patch explique comment utiliser OM_Diph pour renommer les segments d'un dictionnaire en fonction de leur contenu fréquentiel.") "" (om-make-point 55 2) nil (om-make-color 0 0 0) (om-make-font :wild 12 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "CLONE" (quote clone) (quote ((om-load-inputfun (quote input-funbox) "The object to copy" "SELF" nil))) (om-make-point 23 287) nil nil nil nil 1) (om-load-editor-box1 "DIPH-SCRIPT1" (quote diph-script) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "DICTIONARY" "beneditimus.cont") (om-load-inputfun (quote input-funbox) "no documentation" "PLUGIN" "Additive") (om-load-inputfun (quote input-funbox) "no documentation" "INSTRUMENT" "beneditimus") (om-load-inputfun (quote input-funbox) "no documentation" "FILE-1" "") (om-load-inputfun (quote input-funbox) "no documentation" "FILE-2" "") (om-load-inputfun (quote input-funbox) "no documentation" "FILE-3" "") (om-load-inputfun (quote input-funbox) "no documentation" "SEGS-NAME" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SEGS-BEG" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SEGS-END" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SEGS-CTR" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SEGS-INTERPBEG" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SEGS-INTERPEND" nil))) (om-make-point 24 494) (om-make-point 167 98) (if (find-class (quote diph-script) nil) (make-instance (quote diph-script) :dictionary "FLT-IN12.cont" :plugin "Additive" :instrument "FLT-IN12" :file-1 "$USERHOME/ImpExport/Fundamental/FLT-IN12.f0.sdif" :file-2 "$USERHOME/ImpExport/Partial/FLT-IN12.add.sdif" :file-3 "$USERHOME/ImpExport/SpecEnv/FLT-IN12.cc.sdif" :segs-name (list "G#3_G#3-FLT-IN12" "G#3_C4-FLT-IN12" "C4_F4-FLT-IN12" "F4_C#4-FLT-IN12" "C#4_F4-FLT-IN12" "F4_C#4-FLT-IN12" "C#4_F4-FLT-IN12" "F4_C#4-FLT-IN12" "C#4_C#4-FLT-IN12") :segs-beg (list 0.0 0.12 0.4 0.67 1.20333 2.03 2.16 3.12 4.91) :segs-end (list 0.21 0.5 0.74 1.59667 2.07 2.21 3.98 4.98 5.088) :segs-ctr (list 0.03 0.3 0.6 0.81 1.99 2.11 2.26 4.84 5.05) :segs-interpbeg (list 0.0 0.09 0.1 0.07 0.39333 0.04 0.05 0.86 0.07) :segs-interpend (list 0.09 0.1 0.07 0.39333 0.04 0.05 0.86 0.07 0.0) :from-file t)) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil) (om-load-boxcall (quote slot) "slots" (quote diph-script) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "DICTIONARY" "beneditimus.cont") (om-load-inputfun (quote input-funbox) "no documentation" "PLUGIN" "Additive") (om-load-inputfun (quote input-funbox) "no documentation" "INSTRUMENT" "beneditimus") (om-load-inputfun (quote input-funbox) "no documentation" "FILE-1" "") (om-load-inputfun (quote input-funbox) "no documentation" "FILE-2" "") (om-load-inputfun (quote input-funbox) "no documentation" "FILE-3" "") (om-load-inputfun (quote input-funbox) "no documentation" "SEGS-NAME" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SEGS-BEG" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SEGS-END" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SEGS-CTR" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SEGS-INTERPBEG" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SEGS-INTERPEND" nil))) (om-make-point 67 388) (om-make-point 169 55) nil nil nil 13) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 189 250) (om-make-point 27 30) 2 "2" nil) (om-load-editor-box1 "DIPH-SCRIPT" (quote diph-script) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "DICTIONARY" "beneditimus.cont") (om-load-inputfun (quote input-funbox) "no documentation" "PLUGIN" "Additive") (om-load-inputfun (quote input-funbox) "no documentation" "INSTRUMENT" "beneditimus") (om-load-inputfun (quote input-funbox) "no documentation" "FILE-1" "") (om-load-inputfun (quote input-funbox) "no documentation" "FILE-2" "") (om-load-inputfun (quote input-funbox) "no documentation" "FILE-3" "") (om-load-inputfun (quote input-funbox) "no documentation" "SEGS-NAME" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SEGS-BEG" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SEGS-END" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SEGS-CTR" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SEGS-INTERPBEG" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SEGS-INTERPEND" nil))) (om-make-point 28 130) (om-make-point 167 98) (if (find-class (quote diph-script) nil) (make-instance (quote diph-script) :dictionary "FLT-IN12.cont" :plugin "Additive" :instrument "FLT-IN12" :file-1 "$USERHOME/ImpExport/Fundamental/FLT-IN12.f0.sdif" :file-2 "$USERHOME/ImpExport/Partial/FLT-IN12.add.sdif" :file-3 "$USERHOME/ImpExport/SpecEnv/FLT-IN12.cc.sdif" :segs-name (list "FLT-IN12-1" "FLT-IN12-2" "FLT-IN12-3" "FLT-IN12-4" "FLT-IN12-5" "FLT-IN12-6" "FLT-IN12-7" "FLT-IN12-8" "FLT-IN12-9") :segs-beg (list 0.0 0.12 0.4 0.67 1.20333 2.03 2.16 3.12 4.91) :segs-end (list 0.21 0.5 0.74 1.59667 2.07 2.21 3.98 4.98 5.088) :segs-ctr (list 0.03 0.3 0.6 0.81 1.99 2.11 2.26 4.84 5.05) :segs-interpbeg (list 0.0 0.09 0.1 0.07 0.39333 0.04 0.05 0.86 0.07) :segs-interpend (list 0.09 0.1 0.07 0.39333 0.04 0.05 0.86 0.07 0.0) :from-file t)) "x" nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 250 280) (om-make-point 150 100) 0 0 (quote t))) nil nil nil nil))) (quote ((14 0 2 0 nil 0) (13 0 2 2 nil 0) (0 0 2 3 nil 0) (12 0 3 0 nil 0) (14 0 10 0 nil 0) (12 0 11 0 nil 0) (10 0 12 0 nil 0) (2 0 12 7 nil 0))) nil 6.060015))