; OM File Header - Saved 2012/11/22 19:14:52
; (6.060015 :patc (om-make-point 70 91) (om-make-point 497 66) (om-make-point 1042 812) "non documentation" 183 0 nil "2012/11/22 19:14:52")
; End File Header
; External resources 
; (list (list (quote :text) "../../diphfolder/OM_Diph/SAHIB.dico.desc"))
(in-package :om)(load-lib-for (quote ("OM-Diph")))(setf *om-current-persistent* (om-load-patch1 "03-do-synthesis" (quote ((om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "text to put in the file" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede mode" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "contents eval mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list"))))) (om-make-point 235 81) (om-make-point 102 67) (load-textfile (om-make-pathname :directory (quote (:relative "diphfolder" "OM_Diph")) :device nil :host nil :name "SAHIB.dico" :type "desc") (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) nil nil nil nil) (om-load-boxcomment "comment" (om-make-point 333 51) (quote "3) Cet objet génére et exécute automatiquement un applescript qui demande à Diphone de calculer la resynthèse de la séquence en haute qualité.") "" (om-make-point 685 490) nil (om-make-color 0 0 0) (om-make-font :wild 12 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment2" (om-make-point 166 36) (quote "2) cet objet exécute le script Diphone.") "" (om-make-point 387 609) nil (om-make-color 0 0 0) (om-make-font :wild 10 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 405 41) (quote "Ce patch montre comment utiliser OM_Diph pour créer une séquence Diphone et récupérer la resynthèse de haute qualité dans OM.") "" (om-make-point 67 9) nil (om-make-color 0 0 0) (om-make-font :wild 12 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 152 45) (quote "<--- exécutez l'objet séquence") "" (om-make-point 571 671) nil (om-make-color 0 0 0) (om-make-font :wild 12 :family :wild :style (quote (:plain)) :mode (quote nil))) (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil) (om-load-inputfun (quote input-funbox) "patch" "OPPATCH" nil))) (om-make-point 490 655) nil nil nil 2) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 444 79) (om-make-point 34 30) 50 "50" nil) (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 575 554) (om-make-point 179 83) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (microplay show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx scale player)) (list nil (quote t) 1 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil (quote :midishare))) t nil nil nil) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil))) (om-make-point 307 555) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 415 403) (om-make-point 49 22) "MySeq" "\"MySeq\"" nil) (om-load-boxcall (quote genfun) "DIPHSAVEAS" (quote diph::diphsaveas) (quote ((om-load-inputfun (quote input-funbox) "Name of a dictionary/sequence OR list of dictionaries/sequences" "LISTITEM" "MySeq") (om-load-inputfun (quote input-funbox) "Path : if nil, it use the default diphone folder" "PATH" "use-diphone-folder"))) (om-make-point 423 510) nil nil nil nil 2) (om-load-boxcall (quote genfun) "EXECUTEDIPHSCRIPT" (quote diph::executediphscript) (quote ((om-load-inputfun (quote input-funbox) "Name of the script to execute." "SCRIPT-NAME" "MyDiphScrpit.txt"))) (om-make-point 316 614) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DOSYNTHESIS" (quote diph::dosynthesis) (quote ((om-load-inputfun (quote input-funbox) "Name of the Apple script to execute." "SCRIPT-NAME" "MyAppleScrpit.txt"))) (om-make-point 571 487) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 69 84) (om-make-point 94 30) "SAHIB.dico" "\"SAHIB.dico\"" nil) (om-load-boxcall (quote genfun) "GETDESCRIPTION" (quote diph::getdescription) (quote ((om-load-inputfun (quote input-funbox) "Name of a dictionary" "DICO" "SAHIB.dico"))) (om-make-point 82 128) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DIPHEXTRACT1" (quote diph::diphextract) (quote ((om-load-inputfun (quote input-funbox) "Description file read by a Textfile object. DON'T FORGET TO ERASE THE FIRST LINE OF THE TEXT FILE MANUNALY !!!" "DESCRFILE" "Descriptionfile"))) (om-make-point 214 165) (om-make-point 202 61) nil "&" nil 9) (om-load-boxcall (quote genfun) "REPEAT-N1111" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 3))) (om-make-point 409 289) nil nil nil "repeat-n" 1) (om-load-boxcall (quote genfun) "NTH-RANDOM1" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "the list" "LIST" nil))) (om-make-point 306 260) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST11" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 274 240) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 242 275) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DIPHPACK1" (quote diph::diphpack) (quote ((om-load-inputfun (quote input-funbox) "Dictionary name" "DICONAME" "MyDico") (om-load-inputfun (quote input-funbox) "Instrument name" "INSTNAME" "Inst") (om-load-inputfun (quote input-funbox) "segments list" "SEGLIST" (list "Segm1" "Segm2" "Segm4")))) (om-make-point 115 402) (om-make-point 153 61) nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 722 333) (om-make-point 41 30) 150 "150" nil) (om-load-boxcall (quote genfun) "REPEAT-N12" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 100))) (om-make-point 565 152) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 551 219) (om-make-point 48 30) (list 6 4) "(6 4)" nil) (om-load-boxcall (quote genfun) "OM/1" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 8))) (om-make-point 474 218) (om-make-point 74 35) nil nil nil 1) (om-load-boxcall (quote genfun) "MKTREE" (quote mktree) (quote ((om-load-inputfun (quote input-funbox) "list of integer ratio" "RHYTHM" (list 1/4 1/4 1/4 1/4)) (om-load-inputfun (quote input-funbox) "list of time signatures" "TIMESIGNS" (list 4 4)))) (om-make-point 515 276) nil nil nil nil 1) (om-load-editor-box1 "VOICE1" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 -2 1 1)) 1 1)) (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) -1 1))))) (om-load-inputfun (quote input-funbox) "a chord object , a list of chord objects, a list of midics, a list of lists of midics." "CHORDS" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "a number indicating the frequency of the quarter-note (default 60/mn)" "TEMPO" 60) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 100) (om-load-inputfun (quote input-funbox) "no documentation" "TIES" nil))) (om-make-point 480 366) (om-make-point 259 105) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (33/2 (((6 4) ((1 (1 1)) (1 (1 1)) 4)) ((6 4) ((1 (1 1)) 4 1)) ((6 4) (1 (1 (1 1)) (1 (1.0 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)))) ((6 4) (4 (1 (1 1)) 1.0)) ((6 4) (2.0 (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((6 4) ((1 (1.0 1)) (1 (1 1)) 4)) ((6 4) (4 1 1)) ((6 4) (3.0 (1 (1 1)) 2.0)) ((6 4) (1.0 (1 (1.0 1)) (1 (1 1)) (1 (1 1)) (1 (1 1)) 1)) ((6 4) (3.0 (1 (1 1)) (1 (1.0 1)) (1 (1 1)))) ((6 4) ((1 (1.0 1)) -4 -1.0))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (1600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (400)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (400)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (1600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (1600)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (400)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (400)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (400)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (200)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 150) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (microplay obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos show-stems scale player)) (list nil 0 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 (quote t) nil (quote :midishare))) t nil nil nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 48) (om-load-inputfun (quote input-funbox) "max" "HIGH" 72))) (om-make-point 590 223) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 660 217) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N1" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 50))) (om-make-point 644 295) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 595 284) (om-make-point 31 35) nil nil nil 1) (om-load-boxcall (quote genfun) "NTH-RANDOM11" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "the list" "LIST" nil))) (om-make-point 679 121) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list211" (quote list) (quote nil) (om-make-point 708 84) (om-make-point 73 23) (list 1 1 8 1 1 2) "(1 1 8 1 1 2 )" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 328 433) (om-make-point 37 23) (list 0.05) "(0.05)" nil) (om-load-boxcall (quote genfun) "DIPHSEQ&RYTHME1" (quote diph::diphseq&rythme) (quote ((om-load-inputfun (quote input-funbox) "List of segments : (MyDico(inst1(Segm1Segm8 Segm3) Inst2 (Segm1 Segm5 segm1)))" "LISTSEG" (list "MyDico" (list "inst1" (list "Segm1" "Segm8" "Segm3") "Inst2" (list "Segm1" "Segm5" "Segm1")))) (om-load-inputfun (quote input-funbox) "list of length values OR ChordSeq OR Voice" "NEWVALUELIST" (list 0.5 1.0 2.0 1.0 1.0)) (om-load-inputfun (quote input-funbox) "list of scale values (0 means no change)" "INTENSITYLIST" (list -0.75 0 0.25)) (om-load-inputfun (quote input-funbox) "MySeq" "SEQNAME" "MySeq") (om-load-inputfunmenu1 (quote input-funmenu) "Loop list of values OR not." "LOOPMODE" "loop" (list (list "No Loop" "noloop") (list "Loop" "loop"))) (om-load-inputfun (quote input-funbox) "Interpolation duration" "INTERDURLIST" (list 0.1)) (om-load-inputfunmenu1 (quote input-funmenu) "Coor mode" "BPFCOORMODE" "Elastic" (list (list "Elastic" "Elastic") (list "Hard" "Hard") (list "ElacticReverse" "ElacticReverse") (list "HardReverse" "HardReverse"))) (om-load-inputfunmenu1 (quote input-funmenu) "Method for rythme" "METHOD" 3 (list (list "Use sides" 1) (list "Use centers" 2) (list "Use centers & sides" 3))))) (om-make-point 172 486) (om-make-point 217 61) nil nil nil 1))) (quote ((14 0 0 0 nil 0) (11 0 5 0 nil 0) (7 0 5 1 nil 0) (12 0 7 0 nil 0) (34 0 8 0 nil 0) (10 0 8 1 nil 0) (9 0 10 0 nil 0) (8 0 11 0 nil 0) (10 1 12 0 nil 0) (13 0 14 0 nil 0) (0 1 15 0 nil 0) (17 0 16 0 nil 0) (6 0 16 1 nil 0) (18 0 17 0 nil 0) (15 2 18 0 nil 0) (15 1 19 0 nil 0) (15 0 20 0 nil 0) (19 0 20 1 nil 0) (16 0 20 2 nil 0) (31 0 22 0 nil 0) (6 0 22 1 nil 0) (22 0 24 0 nil 0) (24 0 25 0 nil 0) (23 0 25 1 nil 0) (25 0 26 1 nil 0) (29 0 26 2 nil 0) (21 0 26 3 nil 0) (22 0 28 0 nil 0) (30 0 29 0 nil 0) (28 0 29 1 nil 0) (27 0 30 0 nil 0) (32 0 31 0 nil 0) (20 0 34 0 nil 0) (26 0 34 1 nil 0) (9 0 34 3 nil 0) (33 0 34 5 nil 0))) nil 6.060015))